(function() {

    'use strict';

    angular
        .module('app', [
            'app.core',
            'app.filters',
            'app.router',
            'app.components',
            'app.services',
            'app.dashboard',
            'app.material',
            'app.resource',
            'app.plan',
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.components', []);

}());
(function() {

    'use strict';

    angular
        .module('app.core', [
            'ui.router',
            'ngResource',
            'angular-jsoneditor'
        ]);
}());

(function() {

    'use strict';

    angular
        .module('app.dashboard', [
            'app.core'
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.filters', []);

}());
(function() {

    'use strict';

    angular
        .module('app.material', [
            'app.core'
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.plan', [
            'app.core'
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.resource', [
            'app.core'
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.router', [
            'ui.router'
        ]);

}());
(function() {

    'use strict';

    angular
        .module('app.services', []);

}());

(function() {

    'use strict';

    angular
        .module('app.components')
        .directive("fileread", fileread);

    fileread.$inject = ['$parse'];
    /* @ngInject */
    function fileread($parse) {
        var directive = {
            restrict: "A",
            scope: {
                fileread: '='
            },
            link: link
        };

        return directive;

        function link(scope, element, attributes) {
            element.bind("change", function (changeEvent) {
                var file = changeEvent.target.files[0];

                var reader = new FileReader();
                reader.onload = function (loadEvent) {

                    var isImage = file.type.substring(0,5) === 'image';

                    scope.fileread = {
                        url: loadEvent.target.result,
                        size: file.size,
                        type: file.type,
                        name: file.name,
                        isImage: isImage
                    };

                    scope.$apply();
                };
                reader.readAsDataURL(file);

            });
        }
    }

}());
(function() {

    'use strict';

    angular
        .module('app.components')
        .directive("filereadMultiple", filereadMultiple);

    filereadMultiple.$inject = ['$parse'];
    /* @ngInject */
    function filereadMultiple($parse) {
        var directive = {
            restrict: "A",
            scope: {
                filereadMultiple: '='
            },
            link: link
        };

        return directive;

        function link(scope, element, attributes) {
            element.bind("change", function (changeEvent) {
                var files = changeEvent.target.files;
                scope.filereadMultiple = scope.filereadMultiple || [];
                for(var i=0; i<files.length; i++) {
                    (function(file) {
                        var reader = new FileReader();
                        reader.onload = function (loadEvent) {

                            var isImage = file.type.substring(0,5) === 'image';

                            scope.filereadMultiple.push({
                                url: loadEvent.target.result,
                                size: file.size,
                                type: file.type,
                                name: file.name.substring(0,file.name.lastIndexOf(".")),
                                isImage: isImage
                            });

                            scope.$apply();
                        };
                        reader.readAsDataURL(file);
                    }(files[i]));
                }
            });
        }
    }

}());

(function() {

    'use strict';

    angular
        .module('app.components')
        .directive("flashMessage", flashMessage);

    function flashMessage() {
        var directive = {
            restrict: "E",
            templateUrl: '../../templates/components/flashMessage.html'
        };

        return directive;
    }

}());

(function() {

    'use strict';

    angular
        .module('app.components')
        .directive("imageChoose", imageChoose);

    imageChoose.$inject = ['$http'];
    /* @ngInject */
    function imageChoose($http) {
        var directive = {
            restrict: "EAC",
            scope: {
                choose: '='
            },
            templateUrl: '../../templates/components/imageChoose.html',
            link: link
        };

        return directive;

        function link(scope, element, attributes) {
          $(element).find('.modal').modal();
          $(document).on('blur', '.jsoneditor-value', function(e) {
              window.editEle = e.currentTarget;
          });
          $http.get('/node/material/list?materialType=image').success(function(data) {
              scope.list = data;
          });
          scope.selectImage = function(item){
            scope.choose = item;
          };
          scope.insertImage = function(){
            window.editEle.innerHTML = scope.choose.content;
            $(window.editEle).focus().blur().focus();
          };
        }
    }

}());

(function() {

    'use strict';

    angular.module('app.components').directive("pageLoading", pageLoading);

    function pageLoading() {
        var directive = {
            restrict: "E",
            scope: {},
            template: '<div class="preloader-wrapper active">' + '    <div class="spinner-layer spinner-red-only">' + '      <div class="circle-clipper left">' + '        <div class="circle"></div>' + '      </div><div class="gap-patch">' + '        <div class="circle"></div>' + '      </div><div class="circle-clipper right">' + '        <div class="circle"></div>' + '      </div>' + '    </div>' + '  </div>'
        };

        return directive;
    }

}());

(function() {

    'use strict';

    angular.module('app.components').directive("script", createScript);

    function createScript() {
        var directive = {
            restrict: "E",
            scope: false,
            link: function(scope, elem, attr) {
                if (attr.type === 'text/javascript-lazy') {
                    var s = document.createElement("script");
                    s.type = "text/javascript";
                    var src = elem.attr('src');
                    if (src !== undefined) {
                        s.src = src;
                    } else {
                        var code = elem.text();
                        s.text = code;
                    }
                    document.head.appendChild(s);
                    // elem.remove();
                }
            }
        };

        return directive;
    }

}());

(function() {

    'use strict';

    angular
        .module('app.components')
        .directive("textChoose", textChoose);

    textChoose.$inject = ['$http'];
    /* @ngInject */
    function textChoose($http) {
        var directive = {
            restrict: "EAC",
            scope: {
                choose: '='
            },
            templateUrl: '../../templates/components/textChoose.html',
            link: link
        };

        return directive;

        function link(scope, element, attributes) {
          $(element).find('.modal').modal();
          $(document).on('blur', '.jsoneditor-value', function(e) {
              window.editEle = e.currentTarget;
          });
          $http.get('/node/material/list?materialType=text').success(function(data) {
              scope.list = data;
          });
          scope.selectText = function(item){
            scope.choose = item;
          };
          scope.insertText = function(){
            window.editEle.innerHTML = _.escape(scope.choose.content);
            $(window.editEle).focus().blur().focus();
          };
        }
    }

}());

(function() {

    'use strict';

    angular.module('app.components').directive("ueditor", createScript);

    function createScript() {
        var directive = {
            restrict: "EA",
            scope: false,
            link: function(scope, elem, attr) {
                if(window.ue){
                  UE.getEditor('UEcontainer').destroy();
                }
                window.ue = UE.getEditor('UEcontainer');
            }
        };

        return directive;
    }

}());

(function() {

    'use strict';

    angular
        .module('app.core')
        .config(aHrefSafe);

    aHrefSafe.$inject = ['$compileProvider'];
    /* @ngInject */
    function aHrefSafe($compileProvider) {
        $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|file|sms|data):/);
    }

}());

(function() {

    'use strict';

    angular
        .module('app.core')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        var otherwise = '/dashboard';
        routerHelper.configureStates(getStates(), otherwise);
    }

    function getStates() {
        return [
            {
                state:'root',
                config:{
                    url: '',//'^/xxx'代表绝对路径
                    abstract: true, // abstract: true 表明此状态不能被显性激活，只能被子状态隐性激活
                    views:{
                      'header@root':{
                        templateUrl:'templates/layout/header.html',
                      },
                      'sidebar@root':{
                        templateUrl:'templates/layout/sildebar.html'
                      },
                      '@':{
                        templateUrl:'templates/layout/master.html'
                      }
                    }
                }
            },
            {
                state: '404',
                config: {
                    url: '/404',
                    templateUrl: 'templates/error/404.html',
                    title:'404'
                },
            },
        ];
    }

}());

(function() {

    'use strict';

    angular
        .module("app.dashboard")
        .controller('DashboardController', DashboardController);

    DashboardController.$inject = ['$http'];
    /* @nginject */
    function DashboardController($http) {

        var vm = this;
        vm.ready = false;
        vm.getData = getData;

        getData();

        /**
         * Get Data
         */
        function getData() {
            $http.get('/node/dashboard/count').success(function(data) {
                vm.materials_count      = data.materials_count;
                vm.resources_count      = data.resources_count;
                vm.plans_count  = data.plans_count;
                vm.ready = true;
            });
        }
    }

}());

(function() {

    'use strict';

    angular
        .module('app.dashboard')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        routerHelper.configureStates(getStates());
    }

    function getStates() {
        return [
            {
                state: 'root.dashboard',
                config: {
                        url: '/dashboard',
                        views: {
                            'main': {
                                templateUrl: 'templates/dashboard/dashboard.html',
                                controller: 'DashboardController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'主面板'
                    },
            }
        ];
    }
})();

(function() {

    'use strict';

    angular
        .module('app.filters')
        .filter('roles', roles);

    function roles() {
        return function(role) {
            var roleWords = ['Not Auth', 'Auth', 'Admin', 'Super Admin', 'Owner'];

            return roleWords[role];
        }
    }

}());
(function() {

    'use strict';

    angular.module("app.material").controller('MaterialController', MaterialController);

    MaterialController.$inject = ['$http'];
    /* @nginject */
    function MaterialController($http) {
        var vm = this;
        vm.ready = false;
        vm.typeFilter = 'image'
        vm.getData = getData;
        vm.uploadText = uploadText;
        vm.uploadImage = uploadImage;

        /**
         * Get Data
         */
        function getData() {
            $http.get('/node/material/list?materialType='+vm.typeFilter).success(function(data) {
                vm.list = data;
                vm.ready = true;
            });
        }

        /**
         * Upload TextMaterial
         */
        function uploadText() {
            var content = window.ue.getContent();
            $http({
                method: 'POST',
                url: '/node/material/uploadText',
                data: {
                    content: content,
                    materialName: vm.material.materialName
                }
            }).then(function successCallback(data, status, headers, config) {
              Materialize.toast('上传素材成功!', 4000)
            }, function errorCallback(data, status, headers, config) {
              Materialize.toast('上传素材失败!', 4000)
            });
        }

        /**
         * Upload ImageMaterial
         */
        function uploadImage() {
          vm.loading = true;
            $http({
                method: 'POST',
                url: '/node/material/uploadImage',
                data: vm.material.files
            }).then(function successCallback(data, status, headers, config) {
              Materialize.toast('上传素材成功!', 4000);
              vm.material.files = [];
              vm.loading = false;
            }, function errorCallback(data, status, headers, config) {
              Materialize.toast('上传素材失败!', 4000);
              vm.loading = false;
            });
        }
    }

}());

(function() {

    'use strict';

    angular
        .module('app.material')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        routerHelper.configureStates(getStates());
    }

    function getStates() {
        return [
            {
                state: 'root.material',
                config: {
                        url: '^/material',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/material/materialList.html',
                                controller: 'MaterialController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'素材列表'
                    },
            },
            {
                state: 'root.material.create',
                config: {
                        url: '^/material/create',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/material/createMaterial.html',
                                controller: 'MaterialController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'编辑素材'
                    },
            }
        ];
    }
})();

(function() {

    'use strict';

    angular.module("app.plan").controller('PlanController', PlanController);

    PlanController.$inject = ['$http', '$scope', '$stateParams', '$filter'];
    /* @nginject */
    function PlanController($http, $scope, $stateParams, $filter) {

        var vm = this;
        vm.plan = {};
        vm.getData = getData;
        vm.createPlan = createPlan;
        vm.getResource = getResource;
        vm.getPlan = getPlan;
        vm.changeEditMode = changeEditMode;
        /**
         * Get List
         */
        function getData() {
            vm.ready = false;
            $http.get('/node/plan/list').success(function(data) {
                vm.list = data;
                vm.ready = true;
            });
        }

        /**
         * Get Resource By id
         */
        function getResource() {
            vm.ready = false;
            $http.get('/node/resource/' + $stateParams.id).success(function(data) {
                vm.resource = data;
                vm.resource.interface = JSON.parse(vm.resource.interface);
                vm.plan.interface = angular.copy(vm.resource.interface);
                vm.ready = true;
            });
        }

        /**
         * Create Plan
         */
        function createPlan() {
            vm.plan.startTime = $filter("date")(vm.plan.startTime, "yyyy-MM-dd HH:mm:ss");
            vm.plan.endTime = $filter("date")(vm.plan.endTime, "yyyy-MM-dd HH:mm:ss");
            var data = angular.extend(vm.plan, {resource_id: vm.resource.id});
            $http({method: 'POST', url: '/node/plan/create', data: data}).then(function successCallback(data, status, headers, config) {
                Materialize.toast('创建计划成功', 4000);
            }, function errorCallback(data, status, headers, config) {
                Materialize.toast('创建资源位失败', 4000);
            });
        }

        /**
         * Create Plan
         */
        function getPlan() {
            vm.ready = false;
            $http.get('/node/plan/' + $stateParams.id).success(function(data) {
                vm.plan = data;
                vm.plan.startTime = new Date(vm.plan.startTime);
                vm.plan.endTime = new Date(vm.plan.endTime);
                vm.plan.resource.interface = JSON.parse(vm.plan.resource.interface);
                vm.ready = true;
            });
        }

        function changeEditMode(){
            vm.options.mode = vm.options.mode=='form'?'code':'form';
        }

    }

}());

(function() {

    'use strict';

    angular
        .module('app.plan')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        routerHelper.configureStates(getStates());
    }

    function getStates() {
        return [
            {
                state: 'root.plan',
                config: {
                        url: '^/plan',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/plan/onlinePlanList.html',
                                controller: 'PlanController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'计划列表'
                    },
            },
            {
                state: 'root.plan.create',
                config: {
                        url: '^/resource/:id/plan/create',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/plan/createPlan.html',
                                controller: 'PlanController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'资源位-新建计划'
                    },
            },
            {
                state: 'root.plan.edit',
                config: {
                        url: '^/plan/:id',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/plan/editPlan.html',
                                controller: 'PlanController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'资源位-新建计划'
                    },
            },
        ];
    }
})();

(function() {

    'use strict';

    angular.module("app.resource").controller('ResourceController', ResourceController);

    ResourceController.$inject = ['$http', '$stateParams', '$scope', '$timeout'];
    /* @nginject */
    function ResourceController($http, $stateParams, $scope, $timeout) {
        var vm = this;
        vm.getList = getList;
        vm.createResource = createResource;
        vm.getResource = getResource;
        vm.delResource = delResource;
        vm.options = {
            mode: 'code',
            modes: ['form', 'text', 'tree', 'view','code'],
        };

        /**
         * Get Data
         */
        function getList() {
            vm.ready = false;
            $http.get('/node/resource/list').success(function(data) {
                vm.list = data;
                vm.ready = true;
            });
        }

        /**
         * Get Resource By id
         */
        function getResource() {
            vm.ready = false;
            $http.get('/node/resource/' + $stateParams.id).success(function(data) {
                vm.resource = data;
                vm.resource.interface = JSON.parse(vm.resource.interface);
                vm.ready = true;
            });
        }

        /**
         * Create Resource
         */
        function createResource() {
            $http({method: 'POST', url: '/node/resource/create', data: vm.resource}).then(function successCallback(data, status, headers, config) {
                Materialize.toast('创建资源位成功', 4000);
            }, function errorCallback(data, status, headers, config) {
                Materialize.toast('创建资源位失败', 4000);
            });
        }

        /**
         * Delete Resource
         */
        function delResource(id) {
            $http({
                method: 'POST',
                url: '/node/resource/delete',
                data: {
                    resourceId: id
                }
            }).then(function successCallback(data, status, headers, config) {
                Materialize.toast('删除资源位成功', 4000);
                vm.getList();
            }, function errorCallback(data, status, headers, config) {
                Materialize.toast('删除资源位失败', 4000);
            });
        }

        /**
         * Success response
         */
        function _successResponse(successMessage) {
            vm.errors = '';
            vm.flash = successMessage;
            vm.loading = false;
            $timeout(function() {
                vm.flash = false;
            }, 5000);
        }

        /**
         * Errors response
         */
        function _errorResponse(flashError) {
            vm.loading = false;
            vm.flashError = flashError;
            $timeout(function() {
                vm.flashError = false;
            }, 5000);
        }
    }

}());

(function() {

    'use strict';

    angular
        .module('app.resource')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        routerHelper.configureStates(getStates());
    }

    function getStates() {
        return [
            {
                state: 'root.resource',
                config: {
                        url: '^/resource',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/resource/resourceList.html',
                                controller: 'ResourceController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'资源位列表'
                    },
            },
            {
                state: 'root.resource.create',
                config: {
                        url: '^/resource/create',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/resource/createResource.html',
                                controller: 'ResourceController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'新建资源位'
                    },
            },
            {
                state: 'root.resource.edit',
                config: {
                        url: '^/resource/:id',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/resource/editResource.html',
                                controller: 'ResourceController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'编辑资源位'
                    },
            },
            {
                state: 'root.resource.plan',
                config: {
                        url: '^/resource/:id/plan',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/resource/resource-planList.html',
                                controller: 'ResourceController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'资源位-计划'
                    },
            },
        ];
    }
})();

/* Help configure the state-base ui.router */
(function() {

    'use strict';

    angular
        .module('app.router')
        .provider('routerHelper', routerHelperProvider);

    routerHelperProvider.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];
    /* @ngInject */
    function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {
        /* jshint validthis:true */
        var config = {
            docTitle: 'CMS',
            resolveAlways: {}
        };

        // $locationProvider.html5Mode(true);

        this.configure = function(cfg) {
            angular.extend(config, cfg);
        };

        this.$get = RouterHelper;
        RouterHelper.$inject = ['$location', '$rootScope', '$state'];
        /* @ngInject */
        function RouterHelper($location, $rootScope, $state) {
            var handlingStateChangeError = false;
            var hasOtherwise = false;
            var stateCounts = {
                errors: 0,
                changes: 0
            };

            var service = {
                configureStates: configureStates,
                getStates: getStates,
                stateCounts: stateCounts
            };

            init();

            return service;

            function configureStates(states, otherwisePath) {
                states.forEach(function(state) {
                    state.config.resolve =
                        angular.extend(state.config.resolve || {}, config.resolveAlways);
                    $stateProvider.state(state.state, state.config);
                });
                if (otherwisePath && !hasOtherwise) {
                    hasOtherwise = true;
                    $urlRouterProvider.otherwise(otherwisePath);
                }
            }

            function handleRoutingErrors() {
                // Route cancellation:
                // On routing error, go to the dashboard.
                // Provide an exit clause if it tries to do it twice.
                $rootScope.$on('$stateChangeError',
                    function(event, toState, toParams, fromState, fromParams, error) {
                        if (handlingStateChangeError) {
                            return;
                        }
                        stateCounts.errors++;
                        handlingStateChangeError = true;
                        var destination = (toState &&
                            (toState.title || toState.name || toState.loadedTemplateUrl)) ||
                            'unknown target';
                        var msg = 'Error routing to ' + destination + '. ' +
                            (error.data || '') + '. <br/>' + (error.statusText || '') +
                            ': ' + (error.status || '');
                        console.warn(msg);
                        $location.path('/');
                    }
                );
            }

            function init() {
                handleRoutingErrors();
                updateDocTitle();
            }

            function getStates() { return $state.get(); }

            function updateDocTitle() {
                $rootScope.$on('$stateChangeSuccess',
                    function(event, toState, toParams, fromState, fromParams) {
                        stateCounts.changes++;
                        handlingStateChangeError = false;
                        var title = config.docTitle + ' · ' + (toState.title || '');
                        $rootScope.mainUrl = $state.current.url.split('/')[1];
                        $rootScope.title = title; // data bind to <title>
                    }
                );
            }
        }
    }

})();

(function() {

    'use strict';

    angular
        .module("app.services")
        .factory("Material", Material);

    Material.$inject = ['$http'];
    /* @ngInject */
    function Material($http) {
        // return $resource('/admin/api/posts/:id', {id: '@_id'}, {
        //     update: {
        //         method: 'PUT'
        //     }
        // });
    }

}());
