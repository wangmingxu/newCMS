(function() {

    'use strict';

    angular
        .module('app', [
            'app.core',
            'app.filters',
            'app.router',
            'app.components',
            'app.services',
            'app.dashboard',
            'app.material',
            'app.resource',
            'app.plan',
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.components', []);

}());
(function() {

    'use strict';

    angular
        .module('app.dashboard', [
            'app.core'
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.core', [
            'ui.router',
            'ngResource',
            'angular-jsoneditor'
        ]);
}());

(function() {

    'use strict';

    angular
        .module('app.plan', [
            'app.core'
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.resource', [
            'app.core'
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.filters', []);

}());
(function() {

    'use strict';

    angular
        .module('app.material', [
            'app.core'
        ]);

}());

(function() {

    'use strict';

    angular
        .module('app.router', [
            'ui.router'
        ]);

}());
(function() {

    'use strict';

    angular
        .module('app.services', []);

}());

(function() {

    'use strict';

    angular
        .module('app.components')
        .directive("fileread", fileread);

    fileread.$inject = ['$parse'];
    /* @ngInject */
    function fileread($parse) {
        var directive = {
            restrict: "A",
            scope: {
                fileread: '='
            },
            link: link
        };

        return directive;

        function link(scope, element, attributes) {
            element.bind("change", function (changeEvent) {
                var file = changeEvent.target.files[0];

                var reader = new FileReader();
                reader.onload = function (loadEvent) {

                    var isImage = file.type.substring(0,5) === 'image';

                    scope.fileread = {
                        url: loadEvent.target.result,
                        size: file.size,
                        type: file.type,
                        name: file.name,
                        isImage: isImage
                    };

                    scope.$apply();
                };
                reader.readAsDataURL(file);

            });
        }
    }

}());
(function() {

    'use strict';

    angular
        .module('app.components')
        .directive("filereadMultiple", filereadMultiple);

    filereadMultiple.$inject = ['$parse'];
    /* @ngInject */
    function filereadMultiple($parse) {
        var directive = {
            restrict: "A",
            scope: {
                filereadMultiple: '='
            },
            link: link
        };

        return directive;

        function link(scope, element, attributes) {
            element.bind("change", function (changeEvent) {
                var files = changeEvent.target.files;
                scope.filereadMultiple = scope.filereadMultiple || [];
                for(var i=0; i<files.length; i++) {
                    (function(file) {
                        var reader = new FileReader();
                        reader.onload = function (loadEvent) {

                            var isImage = file.type.substring(0,5) === 'image';

                            scope.filereadMultiple.push({
                                url: loadEvent.target.result,
                                size: file.size,
                                type: file.type,
                                name: file.name.substring(0,file.name.lastIndexOf(".")),
                                isImage: isImage
                            });

                            scope.$apply();
                        };
                        reader.readAsDataURL(file);
                    }(files[i]));
                }
            });
        }
    }

}());

(function() {

    'use strict';

    angular
        .module('app.components')
        .directive("flashMessage", flashMessage);

    function flashMessage() {
        var directive = {
            restrict: "E",
            templateUrl: '../../templates/components/flashMessage.html'
        };

        return directive;
    }

}());

(function() {

    'use strict';

    angular.module('app.components').directive("imageChoose", imageChoose);

    imageChoose.$inject = ['$http'];
    /* @ngInject */
    function imageChoose($http) {
        var directive = {
            restrict: "EAC",
            scope: {
                choose: '='
            },
            templateUrl: '../../templates/components/imageChoose.html',
            link: link
        };

        return directive;

        function link(scope, element, attributes) {
            $(element).find('.modal').modal();
            // $(element).hide();
            $(document).on('blur', '.jsoneditor-value', function(e) {
                window.editEle = e.currentTarget;
            });
            // $(document).on('focus', '.jsoneditor-value', function(e) {
            //     $(element).show();
            // });
            scope.getList = function(page) {
                var params = {};
                params.materialType = 'image';
                if (page !== undefined) {
                    params.page = page;
                }
                $http({method: 'GET', url: '/node/material', params: params}).then(function successCallback(data, status, headers, config) {
                    scope.list = data.data.data;
                    scope.totalPage = data.data.totalPage;
                    scope.perpage = data.data.perpage;
                    scope.page = data.data.page;
                }, function errorCallback(data, status, headers, config) {
                    console.log("error");
                });
            };
            scope.getList();
            scope.selectImage = function(item) {
                scope.choose = item;
            };
            scope.insertImage = function() {
                window.editEle.innerHTML = scope.choose.content;
                $(window.editEle).focus().blur().focus();
            };
        }
    }

}());

(function() {

    'use strict';

    angular.module('app.components').directive("pageLoading", pageLoading);

    function pageLoading() {
        var directive = {
            restrict: "E",
            scope: {},
            template: '<div class="preloader-wrapper active">' + '    <div class="spinner-layer spinner-red-only">' + '      <div class="circle-clipper left">' + '        <div class="circle"></div>' + '      </div><div class="gap-patch">' + '        <div class="circle"></div>' + '      </div><div class="circle-clipper right">' + '        <div class="circle"></div>' + '      </div>' + '    </div>' + '  </div>'
        };

        return directive;
    }

}());

(function() {

    'use strict';

    angular.module('app.components').directive("script", createScript);

    function createScript() {
        var directive = {
            restrict: "E",
            scope: false,
            link: function(scope, elem, attr) {
                if (attr.type === 'text/javascript-lazy') {
                    var s = document.createElement("script");
                    s.type = "text/javascript";
                    var src = elem.attr('src');
                    if (src !== undefined) {
                        s.src = src;
                    } else {
                        var code = elem.text();
                        s.text = code;
                    }
                    document.head.appendChild(s);
                    // elem.remove();
                }
            }
        };

        return directive;
    }

}());

(function() {

    'use strict';

    angular
        .module('app.components')
        .directive("textChoose", textChoose);

    textChoose.$inject = ['$http'];
    /* @ngInject */
    function textChoose($http) {
        var directive = {
            restrict: "EAC",
            scope: {
                choose: '='
            },
            templateUrl: '../../templates/components/textChoose.html',
            link: link
        };

        return directive;

        function link(scope, element, attributes) {
          $(element).find('.modal').modal();
          // $(element).hide();
          $(document).on('blur', '.jsoneditor-value', function(e) {
              window.editEle = e.currentTarget;
          });
          // $(document).on('focus', '.jsoneditor-value', function(e) {
          //     $(element).show();
          // });
          scope.getList = function(page) {
              var params = {};
              params.materialType = 'text';
              if (page !== undefined) {
                  params.page = page;
              }
              $http({method: 'GET', url: '/node/material', params: params}).then(function successCallback(data, status, headers, config) {
                  scope.list = data.data.data;
                  scope.totalPage = data.data.totalPage;
                  scope.perpage = data.data.perpage;
                  scope.page = data.data.page;
              }, function errorCallback(data, status, headers, config) {
                  console.log("error");
              });
          };
          scope.getList();
          scope.selectText = function(item){
            scope.choose = item;
          };
          scope.insertText = function(){
            window.editEle.innerHTML = _.escape(scope.choose.content);
            $(window.editEle).focus().blur().focus();
          };
        }
    }

}());

(function() {

    'use strict';

    angular.module('app.components').directive("ueditor", createScript);

    function createScript() {
        var directive = {
            restrict: "EA",
            scope: false,
            link: function(scope, elem, attr) {
                if(window.ue){
                  UE.getEditor('UEcontainer').destroy();
                }
                window.ue = UE.getEditor('UEcontainer');
            }
        };

        return directive;
    }

}());

(function() {

    'use strict';

    angular
        .module("app.dashboard")
        .controller('DashboardController', DashboardController);

    DashboardController.$inject = ['$http'];
    /* @nginject */
    function DashboardController($http) {

        var vm = this;
        vm.ready = false;
        vm.getData = getData;

        getData();

        /**
         * Get Data
         */
        function getData() {
            $http.get('/node/dashboard/count').success(function(data) {
                vm.materials_count      = data.materials_count;
                vm.resources_count      = data.resources_count;
                vm.plans_count  = data.plans_count;
                vm.ready = true;
            });
        }
    }

}());

(function() {

    'use strict';

    angular
        .module('app.dashboard')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        routerHelper.configureStates(getStates());
    }

    function getStates() {
        return [
            {
                state: 'root.dashboard',
                config: {
                        url: '/dashboard',
                        views: {
                            'main': {
                                templateUrl: 'templates/dashboard/dashboard.html',
                                controller: 'DashboardController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'主面板'
                    },
            }
        ];
    }
})();

(function() {

    'use strict';

    angular
        .module('app.core')
        .config(aHrefSafe);

    aHrefSafe.$inject = ['$compileProvider'];
    /* @ngInject */
    function aHrefSafe($compileProvider) {
        $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|file|sms|data):/);
    }

}());

(function() {

    'use strict';

    angular
        .module('app.core')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        var otherwise = '/dashboard';
        routerHelper.configureStates(getStates(), otherwise);
    }

    function getStates() {
        return [
            {
                state:'root',
                config:{
                    url: '',//'^/xxx'代表绝对路径
                    abstract: true, // abstract: true 表明此状态不能被显性激活，只能被子状态隐性激活
                    views:{
                      'header@root':{
                        templateUrl:'templates/layout/header.html',
                      },
                      'sidebar@root':{
                        templateUrl:'templates/layout/sildebar.html'
                      },
                      '@':{
                        templateUrl:'templates/layout/master.html'
                      }
                    }
                }
            },
            {
                state: '404',
                config: {
                    url: '/404',
                    templateUrl: 'templates/error/404.html',
                    title:'404'
                },
            },
        ];
    }

}());

(function() {

    'use strict';

    angular.module("app.plan").controller('PlanController', PlanController);

    PlanController.$inject = ['$http', '$stateParams', '$filter', 'Plan', 'Resource'];
    /* @nginject */
    function PlanController($http, $stateParams, $filter, Plan, Resource) {

        var vm = this;
        vm.plan = {};
        vm.now = Date.now();
        vm.getData = getData;
        vm.createPlan = createPlan;
        vm.getResource = getResource;
        vm.getPlan = getPlan;
        vm.changeEditMode = changeEditMode;
        vm.updatePlan = updatePlan;
        vm.delPlan = delPlan;
        vm.toggleStatus = toggleStatus;

        /**
         * Get List
         */
        function getData(page) {
            vm.ready = false;
            var params = {};
            if(vm.plan.effective!=='' && vm.plan.effective!==undefined){
              params.effective = vm.plan.effective;
            }
            if(page!==undefined){
                params.page = page;
            }
            var list = Plan.query(params,function(){
                vm.list = list.data;
                vm.totalPage = list.totalPage;
                vm.page = list.page;
                vm.totalNum = list.totalNum;
                vm.ready = true;
            });
        }

        /**
         * Get Resource By Id
         */
        function getResource() {
            vm.ready = false;
            Resource.get({id:$stateParams.id},function(data){
                vm.resource = data;
                vm.resource.interface = JSON.parse(vm.resource.interface);
                vm.plan.interface = angular.copy(vm.resource.interface);
                vm.ready = true;
            });
        }

        /**
         * Create Plan
         */
        function createPlan() {
            vm.plan.startTime = $filter("date")(vm.plan.startTime, "yyyy-MM-dd HH:mm:ss");
            vm.plan.endTime = $filter("date")(vm.plan.endTime, "yyyy-MM-dd HH:mm:ss");
            var data = angular.extend(vm.plan, {resource_id: vm.resource.id});
            var newPlan = new Plan(data);
            newPlan.$save(function(){
              Materialize.toast('创建计划成功!', 4000);
            });
        }

        /**
         * Get Plan By Id
         */
        function getPlan() {
            vm.ready = false;
            Plan.get({id:$stateParams.id},function(data){
                vm.plan = data;
                vm.plan.startTime = new Date(vm.plan.startTime);
                vm.plan.endTime = new Date(vm.plan.endTime);
                vm.plan.interface = JSON.parse(vm.plan.interface);
                vm.ready = true;
            });
        }

        function changeEditMode() {
            vm.options.mode = vm.options.mode == 'form'
                ? 'code'
                : 'form';
        }

        /**
         * Delete Plan
         */
        function delPlan(id) {
            Plan.get({id:id},function(plan){
                plan.$delete({id:id},function(){
                  Materialize.toast('删除计划成功', 4000);
                  vm.getData();
                });
            });
        }

        /**
         * Update Plan
         */
        function updatePlan() {
            Plan.get({id:$stateParams.id},function(plan){
                angular.extend(plan,vm.plan);
                plan.$save({id:$stateParams.id},function(){
                  Materialize.toast('更新素材成功', 4000);
                  vm.getPlan();
                });
            });
        }

        function toggleStatus(planId,effective) {
          Plan.get({id:planId},function(plan){
              plan.effective = effective;
              plan.$save({id:planId},function(){
                Materialize.toast('修改计划状态成功', 4000);
                vm.getData();
              });
          });
        }

    }

}());

(function() {

    'use strict';

    angular
        .module('app.plan')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        routerHelper.configureStates(getStates());
    }

    function getStates() {
        return [
            {
                state: 'root.plan',
                config: {
                        url: '^/plan',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/plan/planList.html',
                                controller: 'PlanController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'计划列表'
                    },
            },
            {
                state: 'root.plan.create',
                config: {
                        url: '^/resource/:id/plan/create',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/plan/createPlan.html',
                                controller: 'PlanController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'资源位-新建计划'
                    },
            },
            {
                state: 'root.plan.edit',
                config: {
                        url: '^/plan/:id',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/plan/editPlan.html',
                                controller: 'PlanController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'资源位-新建计划'
                    },
            },
        ];
    }
})();

(function() {

    'use strict';

    angular.module("app.resource").controller('ResourceController', ResourceController);

    ResourceController.$inject = ['$http', '$stateParams', 'Resource', 'Plan'];
    /* @nginject */
    function ResourceController($http, $stateParams, Resource, Plan) {
        var vm = this;
        vm.getList = getList;
        vm.now = Date.now();
        vm.createResource = createResource;
        vm.getResource = getResource;
        vm.delResource = delResource;
        vm.updateResource = updateResource;
        vm.toggleStatus = toggleStatus;
        vm.options = {
            mode: 'code',
            modes: ['form', 'text', 'tree', 'view','code'],
        };

        /**
         * Get Data
         */
        function getList() {
            vm.ready = false;
            var list = Resource.query(function(){
                vm.list = list;
                vm.ready = true;
            });
        }

        /**
         * Get Resource By Id
         */
        function getResource() {
            vm.ready = false;
            Resource.get({id:$stateParams.id},function(data){
                vm.resource = data;
                vm.resource.interface = JSON.parse(vm.resource.interface);
                vm.ready = true;
            });
        }

        /**
         * Create Resource
         */
        function createResource() {
            var newResource = new Resource(vm.resource);
            newResource.$save(function(){
              Materialize.toast('创建资源位成功!', 4000);
            });
        }

        /**
         * Delete Resource
         */
        function delResource(id) {
            Resource.get({id:id},function(resource){
                resource.$delete({id:id},function(){
                  Materialize.toast('删除资源位成功', 4000);
                  vm.getList();
                });
            });
        }

        function updateResource(){
            Resource.get({id:$stateParams.id},function(resource){
                angular.extend(resource,vm.resource);
                resource.$save({id:$stateParams.id},function(){
                  Materialize.toast('修改资源位成功', 4000);
                  vm.getResource();
                });
            });
        }

        function toggleStatus(planId,effective) {
            Plan.get({id:planId},function(plan){
                plan.effective = effective;
                plan.$save({id:planId},function(){
                  Materialize.toast('修改计划状态成功', 4000);
                  vm.getResource();
                });
            });
        }
    }

}());

(function() {

    'use strict';

    angular
        .module('app.resource')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        routerHelper.configureStates(getStates());
    }

    function getStates() {
        return [
            {
                state: 'root.resource',
                config: {
                        url: '^/resource',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/resource/resourceList.html',
                                controller: 'ResourceController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'资源位列表'
                    },
            },
            {
                state: 'root.resource.create',
                config: {
                        url: '^/resource/create',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/resource/createResource.html',
                                controller: 'ResourceController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'新建资源位'
                    },
            },
            {
                state: 'root.resource.edit',
                config: {
                        url: '^/resource/:id',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/resource/editResource.html',
                                controller: 'ResourceController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'编辑资源位'
                    },
            },
            {
                state: 'root.resource.plan',
                config: {
                        url: '^/resource/:id/plan',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/resource/resource-planList.html',
                                controller: 'ResourceController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'资源位-计划'
                    },
            },
        ];
    }
})();

(function() {

    'use strict';

    angular.module('app.filters').filter('numToArr', numToArr);

    function numToArr() {
        return function(num) {
            var array = [];
            for (var i = 0; i < num; i++) {
                array[i] = i + 1;
            }
            return array;
        }
    }

}());

(function() {

    'use strict';

    angular
        .module('app.filters')
        .filter('dateVal', dateVal);

    function dateVal() {
        return function(date) {

            return new Date(date).getTime();
        }
    }

}());

(function() {

    'use strict';

    angular.module("app.material").controller('MaterialController', MaterialController);

    MaterialController.$inject = ['$http','$stateParams','Material'];
    /* @nginject */
    function MaterialController($http,$stateParams,Material) {
        var vm = this;
        vm.typeFilter = 'image';
        vm.getData = getData;
        vm.uploadText = uploadText;
        vm.uploadImage = uploadImage;
        vm.getMaterial= getMaterial;
        vm.updateMaterial = updateMaterial;
        vm.delMaterial = delMaterial;

        /**
         * Get Data
         */
        function getData(page) {
            vm.ready = false;
            var params = {};
            params.materialType = vm.typeFilter;
            if(page!==undefined){
                params.page = page;
            }
            var list = Material.query(params,function(){
                vm.list = list.data;
                vm.totalPage = list.totalPage;
                vm.page = list.page;
                vm.totalNum = list.totalNum;
                vm.ready = true;
            });
        }

        /**
         * Upload TextMaterial
         */
        function uploadText() {
            var content = window.ue.getContent();
            var params = {
                content: content,
                materialName: vm.material.materialName,
                materialType: 'text'
            };
            var newText = new Material(params);
            newText.$save(function(){
              Materialize.toast('上传素材成功!', 4000);
            });
        }

        /**
         * Upload ImageMaterial
         */
        function uploadImage() {
            vm.loading = true;
            var newImage = new Material({files:vm.material.files});
            newImage.$save(function(){
              vm.loading = false;
              Materialize.toast('上传素材成功!', 4000);
            });
        }

        /**
         * GET Material
         */
        function getMaterial() {
          Material.get({id:$stateParams.id},function(data){
              vm.material = data;
              setTimeout(function(){
                window.ue.setContent(data.content);
              },2000);
          });
        }

        /**
         * Delete Material
         */
        function delMaterial(id) {
            Material.get({id:id},function(material){
                material.$delete({id:id},function(){
                  Materialize.toast('删除素材成功', 4000);
                });
            });
        }

        /**
         * Update Material
         */
        function updateMaterial() {
            var content = window.ue.getContent();
            Material.get({id:$stateParams.id},function(material){
                material.content = content;
                material.materialName = vm.material.materialName;
                material.$save({id:$stateParams.id},function(){
                  Materialize.toast('更新素材成功', 4000);
                  vm.getMaterial();
                });
            });
        }
    }

}());

(function() {

    'use strict';

    angular
        .module('app.material')
        .run(appRun);

    appRun.$inject = ['routerHelper'];
    /* @ngInject */
    function appRun(routerHelper) {
        routerHelper.configureStates(getStates());
    }

    function getStates() {
        return [
            {
                state: 'root.material',
                config: {
                        url: '^/material',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/material/materialList.html',
                                controller: 'MaterialController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'素材列表'
                    },
            },
            {
                state: 'root.material.create',
                config: {
                        url: '^/material/create',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/material/createMaterial.html',
                                controller: 'MaterialController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'编辑素材'
                    },
            },
            {
                state: 'root.material.edit',
                config: {
                        url: '^/material/:id',
                        views: {
                            'main@root': {
                                templateUrl: 'templates/material/editMaterial.html',
                                controller: 'MaterialController',
                                controllerAs: 'vm',
                            }
                        },
                        title:'编辑素材'
                    },
            }
        ];
    }
})();

/* Help configure the state-base ui.router */
(function() {

    'use strict';

    angular
        .module('app.router')
        .provider('routerHelper', routerHelperProvider);

    routerHelperProvider.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];
    /* @ngInject */
    function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {
        /* jshint validthis:true */
        var config = {
            docTitle: 'CMS',
            resolveAlways: {}
        };

        // $locationProvider.html5Mode(true);

        this.configure = function(cfg) {
            angular.extend(config, cfg);
        };

        this.$get = RouterHelper;
        RouterHelper.$inject = ['$location', '$rootScope', '$state'];
        /* @ngInject */
        function RouterHelper($location, $rootScope, $state) {
            var handlingStateChangeError = false;
            var hasOtherwise = false;
            var stateCounts = {
                errors: 0,
                changes: 0
            };

            var service = {
                configureStates: configureStates,
                getStates: getStates,
                stateCounts: stateCounts
            };

            init();

            return service;

            function configureStates(states, otherwisePath) {
                states.forEach(function(state) {
                    state.config.resolve =
                        angular.extend(state.config.resolve || {}, config.resolveAlways);
                    $stateProvider.state(state.state, state.config);
                });
                if (otherwisePath && !hasOtherwise) {
                    hasOtherwise = true;
                    $urlRouterProvider.otherwise(otherwisePath);
                }
            }

            function handleRoutingErrors() {
                // Route cancellation:
                // On routing error, go to the dashboard.
                // Provide an exit clause if it tries to do it twice.
                $rootScope.$on('$stateChangeError',
                    function(event, toState, toParams, fromState, fromParams, error) {
                        if (handlingStateChangeError) {
                            return;
                        }
                        stateCounts.errors++;
                        handlingStateChangeError = true;
                        var destination = (toState &&
                            (toState.title || toState.name || toState.loadedTemplateUrl)) ||
                            'unknown target';
                        var msg = 'Error routing to ' + destination + '. ' +
                            (error.data || '') + '. <br/>' + (error.statusText || '') +
                            ': ' + (error.status || '');
                        console.warn(msg);
                        $location.path('/');
                    }
                );
            }

            function init() {
                handleRoutingErrors();
                updateDocTitle();
            }

            function getStates() { return $state.get(); }

            function updateDocTitle() {
                $rootScope.$on('$stateChangeSuccess',
                    function(event, toState, toParams, fromState, fromParams) {
                        stateCounts.changes++;
                        handlingStateChangeError = false;
                        var title = config.docTitle + ' · ' + (toState.title || '');
                        $rootScope.mainUrl = $state.current.url.split('/')[1];
                        $rootScope.title = title; // data bind to <title>
                        window.scrollTo(0,0)
                    }
                );
            }
        }
    }

})();

(function() {

    'use strict';

    angular
        .module("app.services")
        .factory("Material", Material);

    Material.$inject = ['$resource'];
    /* @ngInject */
    function Material($resource) {
        return $resource('/node/material/:id', {id: '@_id'},{query: {method: 'get', isArray: false}});
    }

}());

(function() {

    'use strict';

    angular
        .module("app.services")
        .factory("Plan", Plan);

    Plan.$inject = ['$resource'];
    /* @ngInject */
    function Plan($resource) {
        return $resource('/node/plan/:id', {id: '@_id'},{query: {method: 'get', isArray: false}});
    }

}());

(function() {

    'use strict';

    angular
        .module("app.services")
        .factory("Resource", Resource);

    Resource.$inject = ['$resource'];
    /* @ngInject */
    function Resource($resource) {
        return $resource('/node/resource/:id', {id: '@_id'});
    }

}());
